{"version":3,"sources":["webpack:///./node_modules/whatwg-fetch/fetch.js"],"names":["self","fetch","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","viewClasses","isDataView","obj","DataView","prototype","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","indexOf","Object","toString","call","Headers","append","name","value","normalizeName","normalizeValue","oldValue","this","map","get","has","hasOwnProperty","set","forEach","callback","thisArg","keys","items","push","iteratorFor","values","entries","iterator","methods","Request","clone","body","_bodyInit","Body","Response","status","statusText","headers","url","error","response","type","redirectStatuses","redirect","RangeError","location","input","init","Promise","resolve","reject","request","xhr","XMLHttpRequest","onload","options","parseHeaders","getAllResponseHeaders","responseURL","responseText","onerror","TypeError","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","test","toLowerCase","next","shift","done","undefined","Array","isArray","header","getOwnPropertyNames","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","Uint8Array","chars","length","i","fromCharCode","join","bufferClone","slice","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","Error","rejected","then","text","decode","json","JSON","parse","normalizeMethod","upcased","toUpperCase","mode","referrer","form","trim","split","bytes","replace","decodeURIComponent","rawHeaders","preProcessedHeaders","line","parts","key","bodyInit","ok"],"mappings":"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","file":"js/0.46910f2f.js","sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":""}